<<<<<<< HEAD
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
=======
generator client {
  provider = "prisma-client-js"
>>>>>>> 77ba5867bee9535b28578cfcd2adef6ba3ba5882
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
<<<<<<< HEAD
  id        String   @id @default(uuid())
  email     String   @unique
  username  String   @unique
  createdAt DateTime @default(now())
  posts     Post[]
  comments  Comment[]
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  type      String
  createdAt DateTime  @default(now())
  likes     Int       @default(0)
  authorId  String
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
}
=======
  id          String   @id @default(uuid())
  clerkUserId String   @unique
  email       String   @unique
  name        String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
  upvotes     Upvote[]
  comments    Comment[]
}

model Post {
  id          String   @id @default(uuid())
  title       String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
  createdAt   DateTime @default(now())
  upvotes     Upvote[]
  comments    Comment[]
  
  @@index([userId])
}

model Upvote {
  user      User   @relation(fields: [clerkUserId], references: [clerkUserId])
  post      Post   @relation(fields: [postId], references: [id])
  clerkUserId String
  postId     String

  @@id([clerkUserId, postId])
}


model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([userId])
}
>>>>>>> 77ba5867bee9535b28578cfcd2adef6ba3ba5882
